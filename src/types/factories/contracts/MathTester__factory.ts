/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MathTester,
  MathTesterInterface,
} from "../../contracts/MathTester";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "k",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "q",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "n",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "p",
        type: "uint256",
      },
    ],
    name: "testFracExpNeg",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061031a806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80635b21cef914610030575b600080fd5b61004361003e366004610127565b610055565b60405190815260200160405180910390f35b60006100638585858561006c565b95945050505050565b600080600180825b8581101561011a576000610088828a610255565b83610093868d610268565b61009d919061029d565b6100a7919061029d565b90506100b46002836102b1565b6000036100cc576100c581866102c5565b94506100d9565b6100d681866102dd565b94505b6100e382896102dd565b6100ed9085610268565b93506100fa8260016102c5565b6101049084610268565b9250508080610112906102f4565b915050610074565b5091979650505050505050565b6000806000806080858703121561013d57600080fd5b5050823594602084013594506040840135936060013592509050565b634e487b7160e01b600052601160045260246000fd5b600181815b808511156101aa57816000190482111561019057610190610159565b8085161561019d57918102915b93841c9390800290610174565b509250929050565b6000826101c15750600161024f565b816101ce5750600061024f565b81600181146101e457600281146101ee5761020a565b600191505061024f565b60ff8411156101ff576101ff610159565b50506001821b61024f565b5060208310610133831016604e8410600b841016171561022d575081810a61024f565b610237838361016f565b806000190482111561024b5761024b610159565b0290505b92915050565b600061026183836101b2565b9392505050565b600081600019048311821515161561028257610282610159565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826102ac576102ac610287565b500490565b6000826102c0576102c0610287565b500690565b600082198211156102d8576102d8610159565b500190565b6000828210156102ef576102ef610159565b500390565b60006001820161030657610306610159565b506001019056fea164736f6c634300080d000a";

type MathTesterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MathTesterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MathTester__factory extends ContractFactory {
  constructor(...args: MathTesterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MathTester> {
    return super.deploy(overrides || {}) as Promise<MathTester>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MathTester {
    return super.attach(address) as MathTester;
  }
  override connect(signer: Signer): MathTester__factory {
    return super.connect(signer) as MathTester__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MathTesterInterface {
    return new utils.Interface(_abi) as MathTesterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MathTester {
    return new Contract(address, _abi, signerOrProvider) as MathTester;
  }
}
